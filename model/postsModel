const mysql = require('mysql2');
const dotenv = require('dotenv');
dotenv.config();

const db = mysql.createPool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    connectionLimit: 1,
    waitForConnections: true,
});

const getAllPosts = () => {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM posts`;
        db.query(sql, (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result);
        })
    })
}

const getPostById = (id) => {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM posts WHERE id = ?`;
        db.query(sql, [id], (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result[0]);
        })
    })
}

const getPostByTerm = (term) => {
    return new Promise((resolve, reject) => {
        const sql = `SELECT * FROM posts WHERE (title LIKE ? OR content LIKE ? OR category LIKE ?)`;
        db.query(sql, [`%${term}%`, `%${term}%`, `%${term}%`], (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result);
        })
    })
}

const addPost = (title, content, category, tags, createdAt, updatedAt) => {
    return new Promise((resolve, reject) => {
        const sql = `INSERT INTO posts (title, content, category, tags, createdAt, updatedAt) VALUES (?, ?, ?, ?, ?, ?)`;
        db.query(sql, [title, content, category, tags, createdAt, updatedAt], (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result);
        })
    })
}

const updatePosts = (id, title, content, category, tags, updatedAt) => {
    return new Promise((resolve, reject) => {
        const sql = `UPDATE posts SET title = ?, content = ?, category = ?, tags = ?, updatedAt = ? WHERE id = ?`;
        db.query(sql, [title, content, category, tags, updatedAt, id], (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result);
        })
    })
}

const deletePosts = (id) => {
    return new Promise((resolve, reject) => {
        const sql = `DELETE FROM posts WHERE id = ?`;
        db.query(sql, [id], (error, result) => {
            if (error) {
                return reject(error);
            }
            resolve(result);
        })
    })
}

module.exports = {
    addPost,
    updatePosts,
    deletePosts,
    getPostById,
    getAllPosts,
    getPostByTerm,
};